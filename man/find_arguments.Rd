% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_arguments.R
\name{formula_arg}
\alias{formula_arg}
\alias{data_arg}
\alias{matrix_arg}
\alias{vector_arg}
\alias{list_arg}
\alias{table_arg}
\alias{first_arg}
\alias{data_arg}
\alias{matrix_arg}
\alias{vector_arg}
\alias{character_arg}
\alias{numeric_arg}
\alias{list_arg}
\alias{function_arg}
\alias{table_arg}
\alias{arg_number}
\alias{first_arg}
\alias{named_arg}
\title{Functions to extract an the argument from an expression}
\usage{
formula_arg(ex, ..., n = 1L, message = "")

data_arg(ex, ..., n = 1L, message = "")

matrix_arg(ex, ..., n = 1L, message = "")

vector_arg(ex, ..., n = 1L, message = "")

character_arg(ex, ..., n = 1L, message = "")

numeric_arg(ex, ..., n = 1L, message = "")

list_arg(ex, ..., n = 1L, message = "")

function_arg(ex, ..., n = 1L, message = "")

table_arg(ex, ..., n = 1L, message = "")

arg_number(ex, n = 1L, ..., message = "")

first_arg(ex, ..., message = "")

named_arg(ex, nm, ..., message = "")
}
\arguments{
\item{ex}{the tidy expression to check}

\item{...}{passif/failif/okif tests}

\item{n}{an integer. If there's more than one matching argument, which one do
you want.}

\item{message}{a character string. If this is not empty (i.e. \code{""}) then a fail result
will be generated if the argument isn't found. Default: empty.}

\item{nm}{the name of an argument as a character string (or a regex).}
}
\value{
the matching expression as a quosure that can be evaluated
with eval_tidy().
}
\description{
Use these functions to find a particular argument in an expression.
}
\details{
If the expression isn't a call, it still has a value. These functions
return that value if it's a match to the type sought. If ex directly from
for_checkr(), only the first expression is checked.
}
\examples{
code <- for_checkr(quote(lm(mpg ~ hp, data = mtcars)))
formula_arg(code)
data_arg(code,
  failif( ! "hp" \%in\% names(V),
          "The data should have a column named 'hp'."))
matrix_arg(code)
named_arg(code, "data", failif(EX == `mtcars`, "I didn't want mtcars."))
arg_number(code, 3)
}
