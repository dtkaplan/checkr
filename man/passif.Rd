% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/passif.R
\name{passif}
\alias{passif}
\alias{failif}
\alias{noteif}
\alias{failif}
\alias{noteif}
\alias{insist}
\title{Collate a test expression with a message and a action.}
\usage{
passif(test, message = default_message)

failif(test, message = default_message)

noteif(test, message = default_message)

insist(test, message = "")
}
\arguments{
\item{test}{an expression written in terms of values found
in the pattern-matching bindings}

\item{message}{a character string containing the message to return.}
}
\description{
These functions are simply a way to associate a message with a test.
The test itself will be evaluated in \code{line_} functions, \code{arg_} functions, \code{check()}, etc.
For \code{passif()}, \code{failif()}, and \code{noteif()}, the corresponding result will be generated  if the \code{test}
passes. If the test fails, an "ok" result is generated. But for \code{insist()},
a passing test will generate an "ok", and a failing test will generate a "fail". The point of \code{insist()} is
to avoid the need to use double negative with \code{failif()}. The double negative is confusing and error prone to
many people.
}
\details{
The \code{message} can include components calculated from the bindings.
Enclose these in moustaches, e.g. "The \code{{{F}}} function is not appropriate for adding."
Within a test, the operators \code{==} and \code{!=} in a test have been augmented to deal
with language objects such as names. They are translated to be equivalent to "\%same_as\%".
You can refer to the expression being tested with \code{{{expression_string}}} and to the \code{test} itself as \code{{{test_string}}}.
}
\examples{
code <- for_checkr(quote({x <- 2; y <- x^2; z <- x + y}))
my_line <- line_where(code, F == `+`)
check_binding(my_line, `+`(..(x), ..(y)), insist(y == 4, "use 4 for the second argument to +"))
# or equivalently with a double negative ... fail and y != 4
check_binding(my_line, `+`(..(x), ..(y)), failif(y != 4, "use 4 for the second argument to +"))

}
